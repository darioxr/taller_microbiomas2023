library(dada2)

setwd("~/extras/curso/")

path <- "~/extras/curso/MiSeq_SOP/"
list.files(path)

# Forward and reverse fastq filenames have format: SAMPLENAME_R1_001.fastq and SAMPLENAME_R2_001.fastq
fnFs <- sort(list.files(path, pattern="_R1_001.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_001.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)

plotQualityProfile(fnFs[1:2])

plotQualityProfile(fnRs[1:2])

# Place filtered files in filtered/ subdirectory
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))

out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(240,160),
                     maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
                     compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
head(out)
sum(out[,1]) 
sum(out[,2])/sum(out[,1]) 

errF <- learnErrors(filtFs, multithread=TRUE)

errR <- learnErrors(filtRs, multithread=TRUE)

plotErrors(errF, nominalQ=TRUE)

derepFs <- derepFastq(filtFs, verbose=TRUE)
derepRs <- derepFastq(filtRs, verbose=TRUE)
# Name the derep-class objects by the sample names
names(derepFs) <- sample.names
names(derepRs) <- sample.names

dadaFs <- dada(derepFs, err=errF, multithread=TRUE)

dadaRs <- dada(derepRs, err=errR, multithread=TRUE)

mergers <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose=TRUE)
# Inspect the merger data.frame from the first sample
head(mergers[[1]])

seqtab <- makeSequenceTable(mergers)

dim(seqtab)

# Inspect distribution of sequence lengths
table(nchar(getSequences(seqtab)))

seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=TRUE, verbose=TRUE)

dim(seqtab.nochim)

sum(seqtab.nochim)/sum(seqtab) 

1-sum(seqtab.nochim)/sum(seqtab)

getN <- function(x) sum(getUniques(x))
track <- cbind(out, sapply(dadaFs, getN), sapply(dadaRs, getN), sapply(mergers, getN), rowSums(seqtab.nochim))
# If processing a single sample, remove the sapply calls: e.g. replace sapply(dadaFs, getN) with getN(dadaFs)
colnames(track) <- c("input", "filtered", "denoisedF", "denoisedR", "merged", "nonchim")
rownames(track) <- sample.names
head(track)

taxa <- assignTaxonomy(seqtab.nochim, "silva_nr99_v138.1_train_set.fa.gz", multithread=TRUE, )

library(ShortRead)

Tab <- seqtab.nochim

mdf <- data.frame(ASV_Id=paste0("ASV",seq(1,ncol(Tab))),ASV_Seq=colnames(Tab))

fastaLines = c()
for (rowNum in 1:nrow(mdf)){
  fastaLines = c(fastaLines, as.character(paste(">", mdf[rowNum,"ASV_Id"], sep = "")))
  fastaLines = c(fastaLines,as.character(mdf[rowNum,"ASV_Seq"]))
}

outfile <- "seq_asv.fasta"
fileConn<-file(outfile)
writeLines(fastaLines, outfile)
close(fileConn)

colnames(Tab) <- paste0("ASV",seq(1,ncol(Tab)))
outfile <- "count_table.tsv"
write.table(x=Tab,file=outfile,append=F,quote=F,sep="\t",row.names=T,col.names=T)

rownames(mdf) <- mdf$ASV_Seq

tax <- merge(mdf, taxa, by = "row.names")

tax <- tax[,c(-1,-3)]

rownames(tax) <- tax$ASV_Id

ntax <- NULL
for(i in 1:nrow(tax)){
  noms <- unlist(tax[1,c(2:7)])
  fnom <- paste0("Root; k__",noms[1],"; p__",noms[2],"; c__",noms[3],"; o__",noms[4],"; f__",noms[5],"; g__",noms[6])
  ntax <- c(ntax,fnom)
}

tax$Taxonomy <- factor(ntax)
tax <- tax[,-c(2:7)]

outfile <- "tax.taxonomy"
write.table(x=tax,file=outfile,append=F,quote=F,sep="\t",row.names=T,col.names=T)

###
samples.out <- rownames(seqtab.nochim)
subject <- sapply(strsplit(samples.out, "D"), `[`, 1)
gender <- substr(subject,1,1)
subject <- substr(subject,2,999)
day <- as.integer(sapply(strsplit(samples.out, "D"), `[`, 2))
samdf <- data.frame(Subject=subject, Gender=gender, Day=day)
samdf$When <- "Early"
samdf$When[samdf$Day>100] <- "Late"
rownames(samdf) <- samples.out

outfile <- "metadata.txt"
write.table(x=samdf,file=outfile,append=F,quote=F,sep="\t",row.names=T,col.names=T)
